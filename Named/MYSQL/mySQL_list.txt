I type
II subject
III enveroment
IV  items
V teacherp
VI teachern
VII teacher

INSERT INTO type (id, name_) VALUES
(1,'Lesson'),
(2,'Seminar');

SHOW COLUMNS FROM subject;

+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int         | NO   | PRI | NULL    | auto_increment |
| name_v   | varchar(10) | NO   |     | NULL    |                |
| platform | varchar(20) | NO   |     | NULL    |                |
| type_id  | int         | NO   | MUL | NULL    |                |
| number   | int         | NO   |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+

ALTER TABLE subject MODIFY COLUMN name_v VARCHAR(20) NOT NULL;

INSERT INTO subject (name_v, platform, type_id, number) VALUES
('MYSQL_L1.mp4', 'GB', 1, 1);

+----+--------------+----------+---------+--------+
| id | name_v       | platform | type_id | number |
+----+--------------+----------+---------+--------+
|  1 | MYSQL_L1.mp4 | GB       |       1 |      1 |
+----+--------------+----------+---------+--------+

ALTER TABLE subject ALTER COLUMN platform SET DEFAULT "GB";



ALTER TABLE subject MODIFY COLUMN name_v VARCHAR(20) NOT NULL;


CREATE TABLE topic (
id INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY(id),
name TINYTEXT NOT NULL
)ENGINE=INNODB;

ALTER TABLE items RENAME COLUMN topic TO topic_id; /изменили имя столбца

ALTER TABLE items
ADD CONSTRAINT items_topicfk FOREIGN KEY (`topic_id`) REFERENCES topic(`id`); /добавили связь между таблицами

RENAME TABLE teachern TO teacherf; /переименование таблицы

ALTER TABLE teacher RENAME COLUMN name_id TO fname_id; /переименование столбца

SELECT t.*, f.* FROM teacher t RIGHT JOIN teacherf f ON f.id = t.fname_id; /RIGHT JOIN с выводом всех столбцов обеих таблиц

INSERT INTO topic (id) VALUES (null); /внесение в таблицу установленных по умолчанию данных одновременно во все поля (проверено, что работает только при установлении primary key значения auto incriment);

ALTER TABLE teacher MODIFY COLUMN id INT NOT NULL AUTO_INCREMENT; /установка свойства AUTO_INCREMENT


SELECT ProductName, ProductCount,                   /ПРИМЕР ИСПОЛЬЗОВАНИЕ CASE
    -> CASE
    -> WHEN ProductCount = 1
    -> THEN 'Товар заканчивается'
    -> WHEN ProductCount = 2
    -> THEN 'Мало товара'
    -> WHEN ProductCount = 3
    -> THEN 'Есть в наличии'
    -> ELSE 'Много товара'
    -> END AS Category
    -> FROM Products;
+-------------+--------------+---------------------+
| ProductName | ProductCount | Category            |
+-------------+--------------+---------------------+
| iPhoneX     |            3 | Есть в наличии      |
| iPhone8     |            2 | Мало товара         |
| Galaxv S9   |            2 | Мало товара         |
| GalaxvS8    |            1 | Товар заканчивается |
| P20Pro      |            5 | Много товара        |
+-------------+--------------+---------------------+
5 rows in set (0.00 sec)


 SELECT ProductName, Manufacturer,							/ПРИМЕР ИСПОЛЬЗОВАНИЯ IF
    -> If(ProductCount > 3, 'Много товара', 'Мало товара')
    -> FROM Products;
+-------------+--------------+-----------------------------------------------------+
| ProductName | Manufacturer | If(ProductCount > 3, 'Много товара', 'Мало товара') |
+-------------+--------------+-----------------------------------------------------+
| iPhoneX     | Aool         | Мало товара                                         |
| iPhone8     | Aoole        | Мало товара                                         |
| Galaxv S9   | Samsuno      | Мало товара                                         |
| GalaxvS8    | Samsuno      | Мало товара                                         |
| P20Pro      | Huawei       | Много товара                                        |
+-------------+--------------+-----------------------------------------------------+
5 rows in set (0.00 sec)

UPDATE Products										/ПРИМЕР ИСЕОЛЬЗОВАНИЯ UPDATE (УВЕЛИЧИЛИ ЗНАЧЕНИЕ ПОЛЯ Price на 3000)
    -> SET Price = Price + 3000;
Query OK, 5 rows affected (0.00 sec)
Rows matched: 5  Changed: 5  Warnings: 0

mysql> SELECT * FROM Products;
+----+-------------+--------------+--------------+-------+
| Id | ProductName | Manufacturer | ProductCount | Price |
+----+-------------+--------------+--------------+-------+
|  1 | iPhoneX     | Aool         |            3 | 79000 |
|  2 | iPhone8     | Aoole        |            2 | 54000 |
|  3 | Galaxv S9   | Samsuno      |            2 | 59000 |
|  4 | GalaxvS8    | Samsuno      |            1 | 44000 |
|  5 | P20Pro      | Huawei       |            5 | 39000 |
+----+-------------+--------------+--------------+-------+
5 rows in set (0.00 sec)

													/ПРИМЕР УДАЛЕНИЯ ЗАПИСЕЙ ИМЕЮЩИХ ЗНАЧЕНИЕ 'Aool' в поле Manufacturer
 DELETE FROM products
    -> WHERE Manufacturer = 'Aool';
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM Products;
+----+-------------+--------------+--------------+-------+
| Id | ProductName | Manufacturer | ProductCount | Price |
+----+-------------+--------------+--------------+-------+
|  2 | iPhone8     | Aoole        |            2 | 54000 |
|  3 | Galaxv S9   | Samsuno      |            2 | 59000 |
|  4 | GalaxvS8    | Samsuno      |            1 | 44000 |
|  5 | P20Pro      | Huawei       |            5 | 39000 |
+----+-------------+--------------+--------------+-------+
4 rows in set (0.00 sec)


UPDATE Products SET Manufacturer = 'Apple' WHERE Manufacturer = 'Aoole'; /обновили значение поля





mysql> SELECT * FROM Products
    -> WHERE NOT Manufacturer = 'Samsung'; / ИСПОЛЬЗОВАНИЕ В ЗАПРОСЕ ОТРИЦАНИЯ - NOT (ВЫВОД ВСЕХ МАРОК КРОМЕ САМСУТГ)
+----+-------------+--------------+--------------+-------+
| Id | ProductName | Manufacturer | ProductCount | Price |
+----+-------------+--------------+--------------+-------+
|  2 | iPhone8     | Apple        |            2 | 54000 |
|  5 | P20Pro      | Huawei       |            5 | 39000 |
|  6 | iPhone X    | Apple        |            3 | 76000 |
+----+-------------+--------------+--------------+-------+
3 rows in set (0.00 sec)



mysql> SELECT * FROM Products
    -> WHERE Manufacturer IN ('Apple', 'Samsung'); / ПРИМЕР ИСПОЛЬЗОВАНИЯ IN
+----+-------------+--------------+--------------+-------+
| Id | ProductName | Manufacturer | ProductCount | Price |
+----+-------------+--------------+--------------+-------+
|  2 | iPhone8     | Apple        |            2 | 54000 |
|  3 | Galaxv S9   | Samsung      |            2 | 59000 |
|  4 | GalaxvS8    | Samsung      |            1 | 44000 |
|  6 | iPhone X    | Apple        |            3 | 76000 |
+----+-------------+--------------+--------------+-------+
4 rows in set (0.00 sec)

ALTER TABLE movies ADD language VARCHAR(20); /ДОБАВИТЬ СТОЛБЕЦ

ALTER TABLE movies DROP COLUMN language; /УДАЛИТЬ СТОЛБЕЦ

ALTER TABLE movies ADD FOREIGN KEY (id_director) REFERENCES directors (id); /ДОБАВИТЬ СВЯЗЬ МЕЖДУ ИМЕЮЩИМИСЯ УЖЕ СТОЛБЦАМИ ТАБЛИЦ (ТАБЛИ1А 1 СТОЛБЕЦ - id_directors, ТАБЛИЦА 2 СТОЛБЕЦ id) id (тип int) - ЯВЛЯЕСЯ ПЕРВИЧНЫМ КЛЮЧОМ ТАБЛИЦИ movies, а id_director (имеет тип int) является полем таблицы derectors

SELECT title AS TITLE, time AS TIME, CASE WHEN time >= 160 AND time 
< 170 THEN "CENTER" END AS timer FROM movies LEFT JOIN directors ON id_director = directors.id; /ИСПОЛЬЗОВАНИЕ CASE


SELECT title AS TITLE, time AS TIME, CASE WHEN time >= 160 AND time < 170 THEN "CENTER" WHEN time >= 142 AND time < 160 THEN "MIN" WHEN time > 170 THEN "BIG" END AS timer FROM movies LEFT JOIN directors ON id_director = directors.id;
+-----------------------------------------+------+--------+
| TITLE                                   | TIME | timer  |
+-----------------------------------------+------+--------+
| Harry Potter and the Philosophers Stone |  152 | MIN    |
| Harry Potter and the Chamber of Secrets |  162 | CENTER |
| The Green Mile                          |  188 | BIG    |
| Forrest Gump                            |  142 | MIN    |
+-----------------------------------------+------+--------+
4 rows in set (0.00 sec)                                     /ИСПОЛЬЗОВАНИЕ CASE


SELECT title AS TITLE, time AS TIME, CASE WHEN time >= 160 AND time
    -> < 170 THEN time *1.2 WHEN time >= 142 AND time < 160 THEN time * 1.1 WHEN time > 170 THEN time * 1.3 END AS timer FROM movies LEFT JOIN directors ON id_director = directors.id;
+-----------------------------------------+------+-------+
| TITLE                                   | TIME | timer |
+-----------------------------------------+------+-------+
| Harry Potter and the Philosophers Stone |  152 | 167.2 |
| Harry Potter and the Chamber of Secrets |  162 | 194.4 |
| The Green Mile                          |  188 | 244.4 |
| Forrest Gump                            |  142 | 156.2 |
+-----------------------------------------+------+-------+
4 rows in set (0.00 sec)  /ЕЩЕ ПРИМЕР ИСПОЛЬЗОВАНИЯ CASE


mysql> SELECT title, time, if (time < 160, 'yes', 'no') FROM movies LEFT JOIN directors ON id_director = directors.id;
+-----------------------------------------+------+------------------------------+
| title                                   | time | if (time < 160, 'yes', 'no') |
+-----------------------------------------+------+------------------------------+
| Harry Potter and the Philosophers Stone |  152 | yes                          |
| Harry Potter and the Chamber of Secrets |  162 | no                           |
| The Green Mile                          |  188 | no                           |
| Forrest Gump                            |  142 | yes                          |
+-----------------------------------------+------+------------------------------+
4 rows in set (0.00 sec)  /ПРИМЕР ИСПОЛЬЗОВАНИЯ IF

 SELECT title, time, if (time < 160, 'yes', 'no') AS 'RESULT' FROM movies LEFT JOIN directors ON id_director = directors.id;
+-----------------------------------------+------+--------+
| title                                   | time | RESULT |
+-----------------------------------------+------+--------+
| Harry Potter and the Philosophers Stone |  152 | yes    |
| Harry Potter and the Chamber of Secrets |  162 | no     |
| The Green Mile                          |  188 | no     |
| Forrest Gump                            |  142 | yes    |
+-----------------------------------------+------+--------+
4 rows in set (0.00 sec) /ПРИМЕР ИСПОЛЬЗОВАНИЯ IF С ПЕРЕИМЕНОВАНИЕ РЕЗУЛЬТИРУЮЩЕГО СТОЛБЦА В 'RESULT'
mysql> SELECT * FROM products ORDER BY Price;
+----+-------------+--------------+--------------+-------+
| Id | ProductName | Manufacturer | ProductCount | Price |
+----+-------------+--------------+--------------+-------+
|  5 | P20Pro      | Huawei       |            5 | 39000 |
|  4 | GalaxvS8    | Samsung      |            1 | 44000 |
|  2 | iPhone8     | Apple        |            2 | 54000 |
|  3 | Galaxv S9   | Samsung      |            2 | 59000 |
|  6 | iPhone X    | Apple        |            3 | 76000 |
+----+-------------+--------------+--------------+-------+
5 rows in set (0.00 sec) / ПРИМЕР СОРТИРОВКИ С ПОМОЩЬЮ ОПЕРАТОРА ORDER BY


 SELECT ProductName, ProductCount * Price AS SUM FROM puoducts ORDER BY SUM;
ERROR 1146 (42S02): Table 'proba.puoducts' doesn't exist
mysql> SELECT ProductName, ProductCount * Price AS SUM FROM products ORDER BY SUM;
+-------------+--------+
| ProductName | SUM    |
+-------------+--------+
| GalaxvS8    |  44000 |
| iPhone8     | 108000 |
| Galaxv S9   | 118000 |
| P20Pro      | 195000 |
| iPhone X    | 228000 |
+-------------+--------+
5 rows in set (0.00 sec) / ПРИМЕР СОРТИРОВКИ С ПРЕДВАРИТЕЛЬНЫМ ДЕЙСТВИЕМ УМНОЖЕНИЯ ПРИ ИСПОЛЬЗОВАНИИ ПСЕВДОНИМОВ